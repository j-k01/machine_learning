#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 28 14:09:14 2018

@author: John Kincaid
"""
from sklearn.metrics import classification_report
from sklearn.preprocessing import normalize
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers.core import Dense
from keras.utils import to_categorical
from keras.layers import Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from sklearn import datasets

##Import the MNIST data.
print("[INFO] loading MNIST (full) dataset...")
dataset = datasets.fetch_mldata("MNIST Original")

#Normalize the data, split it into traing and test sets.
print("[INFO] preprocessing MNIST dataset...")
normal_data = normalize(dataset.data)
input_train = normal_data.reshape(normal_data.shape[0], 28, 28, 1)

#Use a .75/.25 test train split.
(trainX, testX, trainY, testY) = train_test_split(input_train, dataset.target,
	test_size=0.25, random_state=42)

print("[INFO] Done.")

#%%
#Convert the classifcation set to a one-hot equivalent for the model.
trainY = to_categorical(trainY, 10)
testY = to_categorical(testY, 10)
input_shape = (28,28,1)

#Generate a model to train on. I choose to use one similar to the "VGG-like convnet"
#in the Keras documentation because it gave me good accuracy (>99%).
#note: this is not exactly a 784-256-128-10 architecture.
print("[INFO] Training CNN...")
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 padding='valid',
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(32, kernel_size=(3, 3),
                 padding='valid',
                 activation='relu'),
                 )
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3),
                 activation='relu',
                 padding='valid'),
                 )
model.add(Conv2D(64, (3, 3),
                 activation='relu',
                 padding='valid'),
                 )
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

model.fit(trainX, trainY,
           batch_size=256,
           epochs=12,
           verbose=1,
           validation_data=(testX, testY))
score = model.evaluate(testX, testY, verbose=0)

#Display final results.
#Test loss: 0.0358
#Test accuracy: 0.9900
#avg f1-score: 0.99
print('Test loss:', score[0])
print('Test accuracy:', score[1])
print("[INFO] evaluating network...")
predictions = model.predict(testX, batch_size=128)
print(classification_report(testY.argmax(axis=1), predictions.argmax(axis=1) ))